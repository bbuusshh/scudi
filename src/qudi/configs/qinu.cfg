#  Example Qudi configuration file.

global:
    # list of modules to load when starting
    startup: []

    # Module server configuration for accessing qudi GUI/logic/hardware modules from remote clients
    remote_modules_server:
        address: '129.69.46.82'
        port: 12345

    # Server port for serving the active qudi module namespace locally (localhost).
    # Used by e.g. the Qudi jupyter kernel.
    namespace_server_port: 18861

    # If this flag is set (True), all arguments passed to qudi module APIs from remote
    # (jupyter notebook, qudi console, remote modules) will be wrapped and passed "per value"
    # (serialized and de-serialized). This is avoiding f lot of inconveniences with using numpy in
    # remote clients.
    # If you do not want to use this workaround and know what you are doing, you can disable this
    # feature by setting this flag to False.
    force_remote_calls_by_value: True

    # Qss stylesheet for controlling the appearance of the GUIs.
    # Absolute path or relative to qudi.artwork.styles
    stylesheet: 'qdark.qss'

    # Default root directory for measurement data storage. All eventual data sub-directories should
    # be contained within this directory. This is not enforced, just convention.
    # The fallback directory is <user home>/qudi/Data/
    # default_data_dir: C:\Users\neverhorst\qudi\Data

    # Save data to daily data sub-directories by default
    daily_data_dirs: True

gui:
    scanner_gui:
        module.Class: 'scanning.scannergui.ScannerGui'
        options:
            image_axes_padding: 0.02
            default_position_unit_prefix: null  # optional, use unit prefix characters, e.g. 'u' or 'n'
            optimizer_plot_dimensions: [2,1]
        connect:
            scanning_logic: scanning_probe_logic
            data_logic: scanning_data_logic
            optimize_logic: scanning_optimize_logic

    wavemeter_gui:
        module.Class: 'wavemeter.wavemeterloggui.WavemeterLogGui'
        connect:
            wavemeterloggerlogic: 'wavelogger_logic'
    spectrometer:
        module.Class: 'spectrometer.spectrometer_gui.SpectrometerGui'
        connect:
            spectrometer_logic: 'spectrometerlogic'

    timetagger:
        module.Class: 'timetagger.timetagger.TTGui'
        connect:
            timetaggerlogic: 'timetaggerlogic'

    ple_gui:
        module.Class: 'ple.ple_gui.PLEScanGui'
        connect:
            scannerlogic: laser_scanner_logic
            optimizerlogic: ple_optimize_logic
            data_logic: ple_data_logic
            #controller: ple_controller_interfuse_logic
            # microwave: odmr_logic
            #repump: ple_repump_interfuse_logic

    poi_manager_gui:
        module.Class: 'poimanager.poimanagergui.PoiManagerGui'
        connect:
            poi_manager_logic: 'poi_manager_logic'


logic:
    laser_scanner_logic:
        module.Class: 'ple.ple_scanner_logic.PLEScannerLogic'
        options:
            scan_axis: 'a'
            max_history_length: 10
            max_scan_update_interval: 2
            position_update_interval: 1
            channel: 'sum'
        connect:
            scanner: tt_laser_scanner #ni_laser_scanner #ni_cwave_scanner

    ple_controller_interfuse_logic:
       module.Class: 'ple.controller_interfuse.ControllerInterfuseLogic'
       options:
            power_channel: 3
       connect:
        #    switchlogic: "switchlogic"
            power_controller: powercontroller_logic

    ple_repump_interfuse_logic:
       module.Class: 'ple.repump_interfuse.RepumpInterfuseLogic'
       options:
           resonant_laser:  'd_ch8'
           repump_laser: 'd_ch1'
       connect:
           pulsed: pulsed_master_logic

    ple_data_logic:
        module.Class: 'ple.data_logic.PleDataLogic'
        options:
            max_history_length: 10
        connect:
            scan_logic: laser_scanner_logic

    ple_optimize_logic:
        module.Class: 'ple.optimize_logic.PLEOptimizeScannerLogic'
        connect:
            scan_logic: laser_scanner_logic

    poi_manager_logic:
        module.Class: 'scanning.poi_manager_logic.PoiManagerLogic'
        connect:
            scanning_logic: 'scanning_probe_logic'
            optimize_logic: 'scanning_optimize_logic'
            data_logic: 'scanning_data_logic'

    scanning_probe_logic:
        module.Class: 'scanning.probe_logic.ScanningProbeLogic'
        options:
            max_history_length: 10
            max_scan_update_interval: 2
            position_update_interval: 1
            backwards_line_resolution: 100
        connect:
            scanner: ni_scanner
    #ni_scanner

    scanning_data_logic:
        module.Class: 'scanning.data_logic.ScanningDataLogic'
        options:
            max_history_length: 10
        connect:
            scan_logic: scanning_probe_logic

    scanning_optimize_logic:
        module.Class: 'scanning.optimize_logic.ScanningOptimizeLogic'
        connect:
            scan_logic: scanning_probe_logic
        options:
            backwards_line_resolution: 20

    spectrometerlogic:
        module.Class: 'spectrometer_logic.SpectrometerLogic'
        connect:
            spectrometer: 'princeton'#'oceanoptics'#
            flip_mirror: 'flip_mirror_switch_ni'

    timetaggerlogic:
        module.Class: 'timetagger_logic.TimeTaggerLogic'
        connect:
            timetagger: 'tagger'

    wavelogger_logic:
        module.Class: "wavemeter_logger_logic.WavemeterLoggerLogic"
        connect:
            wavemeter: "high_finesse_wavemeter"
            timetagger: 'tagger'

hardware:

    tagger:
        module.Class: 'swabian_instruments.timetagger_api.TT'
        options:
            hist:
                channels: [1,2, 3]
                trigger_channel: 5

            corr:
                channel_start: 1
                channel_stop: 2

            counter:
                channels: [1,2, 3]

            combiner:
                channels: [1,2]
            channels_params:
                1:
                    delay: 0
                    trigger_level: 0.3
                2:
                    delay: 0
                    trigger_level: 0.3
                6: # cwave internal scanner
                    delay: 20e3
                    trigger_level: 0.2

    princeton:
        module.Class: "spectrometer.princeton_client.PrincetonSpectrometerClient"
        options:
            ip: '192.168.202.44'#attodry:'169.254.128.44'
            port: 3336

    oceanoptics:
        module.Class: 'spectrometer.oceanoptics_spectrometer.OceanOptics'

    high_finesse_wavemeter:
        module.Class: 'high_finesse_wavemeter.HighFinesseWavemeter'
        options:
            measurement_timing: 10.0 # in secondsc

    attocube_scanner:
        module.Class: 'attocube.anc300.ANC300'
        options:
            address: "COM9"


    tt_laser_scanner:
        module.Class: 'interfuse.dl_pro_tt_ao_scan.DLProTTPLEScanner'
        connect:
            tt: 'tagger'
            triggered_ao: 'dl_pro'
        options:
            channel_mapping:
                a: 'OutA'
                APD1: 'tt1'
                APD2: 'tt2'
                APD3: 'tt3'
            sum_channels: ["tt1", "tt2"]
            ao_trigger_channel: "tt8"
            scan_units: 'MHz'
            position_ranges: # in m
                a: [0, 19650]
            frequency_ranges:
                a: [1, 2000]
            resolution_ranges:
                a: [20, 5000]
            input_channel_units:
                APD1: 'c/s'
                APD2: 'c/s'
                APD3: 'c/s'
            backwards_line_resolution: 100 # optional
            maximum_move_velocity: 50e9 #MHz/s

    dl_pro:
        module.Class: 'laser.toptica_dl_pro.DlProLaser'
        options:
            tcp_address: 192.168.202.74
            trigger_channel : 3
            ao_channel_config :
                OutA:
                    limits: [0, 4]
                    keep_value: True