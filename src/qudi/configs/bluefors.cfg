#  Example Qudi configuration file.

global:
    # list of modules to load when starting
    startup: []

    # Module server configuration for accessing qudi GUI/logic/hardware modules from remote clients
    remote_modules_server:
        address: '129.69.46.82'
        port: 12345

    # Server port for serving the active qudi module namespace locally (localhost).
    # Used by e.g. the Qudi jupyter kernel.
    namespace_server_port: 18861

    # If this flag is set (True), all arguments passed to qudi module APIs from remote
    # (jupyter notebook, qudi console, remote modules) will be wrapped and passed "per value"
    # (serialized and de-serialized). This is avoiding f lot of inconveniences with using numpy in
    # remote clients.
    # If you do not want to use this workaround and know what you are doing, you can disable this
    # feature by setting this flag to False.
    force_remote_calls_by_value: True

    # Qss stylesheet for controlling the appearance of the GUIs.
    # Absolute path or relative to qudi.artwork.styles
    stylesheet: 'qdark.qss'

    # Default root directory for measurement data storage. All eventual data sub-directories should
    # be contained within this directory. This is not enforced, just convention.
    # The fallback directory is <user home>/qudi/Data/
    # default_data_dir: C:\Users\neverhorst\qudi\Data

    # Save data to daily data sub-directories by default
    daily_data_dirs: True

gui:
    scanner_gui:
        module.Class: 'scanning.scannergui.ScannerGui'
        options:
            image_axes_padding: 0.02
            default_position_unit_prefix: null  # optional, use unit prefix characters, e.g. 'u' or 'n'
            optimizer_plot_dimensions: [2,1]
        connect:
            scanning_logic: scanning_probe_logic
            data_logic: scanning_data_logic
            optimize_logic: scanning_optimize_logic
    
    wavemeter_gui:
        module.Class: 'wavemeter.wavemeterloggui.WavemeterLogGui'
        connect:
            wavemeterloggerlogic: 'wavelogger_logic'
    spectrometer:
        module.Class: 'spectrometer.spectrometer_gui.SpectrometerGui'
        connect:
            spectrometer_logic: 'spectrometerlogic'
        
    timetagger:
        module.Class: 'timetagger.timetagger.TTGui'
        connect:
            timetaggerlogic: 'timetaggerlogic'

    magnetgui:
        module.Class: 'magnet.magnetgui.MagnetWindow'
        connect:
            magnetlogic: magnetlogic

    odmr_gui:
        module.Class: 'odmr.odmrgui.OdmrGui'
        connect:
            odmr_logic: 'odmr_logic'

    ple_gui:
        module.Class: 'ple.ple_gui.PLEScanGui'
        connect:
            scannerlogic: laser_scanner_logic
            optimizerlogic: ple_optimize_logic
            data_logic: ple_data_logic
            #controller: ple_controller_interfuse_logic
            # microwave: odmr_logic
            #repump: ple_repump_interfuse_logic
    switch_gui:
        module.Class: 'switch.switch_gui.SwitchGui'
        connect:
            switchlogic: 'switchlogic'

    pulsed_gui:
        module.Class: 'pulsed.pulsed_maingui.PulsedMeasurementGui'
        connect:
            pulsedmasterlogic: 'pulsed_master_logic'
    poi_manager_gui:
        module.Class: 'poimanager.poimanagergui.PoiManagerGui'
        connect:
            poi_manager_logic: 'poi_manager_logic'

    power_controller_gui:
        module.Class: 'power_controller.powercontroller_gui.PowerControllerGui'
        connect:
            powercontrollerlogic: powercontroller_logic

logic:
    laser_scanner_logic:
        module.Class: 'ple.ple_scanner_logic.PLEScannerLogic'
        options:
            scan_axis: 'a'
            max_history_length: 10
            max_scan_update_interval: 2
            position_update_interval: 1
            channel: 'APD1'
        connect:
            scanner: ni_laser_scanner
    
    magnetlogic:
        module.Class: 'magnetlogic.MagnetLogic'
        connect:
            magnet: vector_magnet
            tagger: tagger

    ple_controller_interfuse_logic:
       module.Class: 'ple.controller_interfuse.ControllerInterfuseLogic'
       options:
            power_channel: 3
       connect:
        #    switchlogic: "switchlogic"
            power_controller: powercontroller_logic

    ple_repump_interfuse_logic:
       module.Class: 'ple.repump_interfuse.RepumpInterfuseLogic'
       options:
           resonant_laser:  'd_ch8'
           repump_laser: 'd_ch1'
       connect:
           pulsed: pulsed_master_logic
       
    ple_data_logic:
        module.Class: 'ple.data_logic.PleDataLogic'
        options:
            max_history_length: 10
        connect:
            scan_logic: laser_scanner_logic

    ple_optimize_logic:
        module.Class: 'ple.optimize_logic.PLEOptimizeScannerLogic'
        connect:
            scan_logic: laser_scanner_logic

    poi_manager_logic:
        module.Class: 'scanning.poi_manager_logic.PoiManagerLogic'
        connect:
            scanning_logic: 'scanning_probe_logic'
            optimize_logic: 'scanning_optimize_logic'
            data_logic: 'scanning_data_logic'

    odmr_logic:
        module.Class: 'odmr_logic.OdmrLogic'    
        connect:
            microwave: 'mw_source_smiq'
            data_scanner: 'ni_tt_finite_sampling_input'

    scanning_probe_logic:
        module.Class: 'scanning.probe_logic.ScanningProbeLogic'
        options:
            max_history_length: 10
            max_scan_update_interval: 2
            position_update_interval: 1
            backwards_line_resolution: 50
        connect:
            scanner: ni_scanner 
    #ni_scanner

    scanning_data_logic:
        module.Class: 'scanning.data_logic.ScanningDataLogic'
        options:
            max_history_length: 10
        connect:
            scan_logic: scanning_probe_logic

    scanning_optimize_logic:
        module.Class: 'scanning.optimize_logic.ScanningOptimizeLogic'
        connect:
            scan_logic: scanning_probe_logic
        options:
            backwards_line_resolution: 10

    time_series_reader_logic:
        module.Class: 'time_series_reader_logic.TimeSeriesReaderLogic'
        options:
            max_frame_rate: 10  # optional (10Hz by default)
            calc_digital_freq: True  # optional (True by default)
            active_channels: ['pfi8','pfi3']
        connect:
            streamer: ni_instreamer

    spectrometerlogic:
        module.Class: 'spectrometer_logic.SpectrometerLogic'
        connect:
            spectrometer: 'princeton'#'oceanoptics'#
            flip_mirror: 'flip_mirror_switch_ni'
          
    timetaggerlogic:
        module.Class: 'timetagger_logic.TimeTaggerLogic'
        connect:
            timetagger: 'tagger'

    pulsed_master_logic:
        module.Class: 'pulsed.pulsed_master_logic.PulsedMasterLogic'
        connect:
            pulsedmeasurementlogic: 'pulsed_measurement_logic'
            sequencegeneratorlogic: 'sequence_generator_logic'

    sequence_generator_logic:
        module.Class: 'pulsed.sequence_generator_logic.SequenceGeneratorLogic'
        #overhead_bytes: 0
        #additional_predefined_methods_path: null
        #additional_sampling_functions_path: null
        #assets_storage_path:
        connect:
            pulsegenerator: "pulsestreamer"

    pulsed_measurement_logic:
        module.Class: 'pulsed.pulsed_measurement_logic.PulsedMeasurementLogic'
        options:
            raw_data_save_type: 'text'
            #additional_extraction_path:
            #additional_analysis_path:
        connect:
            fastcounter: "fastcounter_timetagger"
            #microwave: 'microwave_dummy'
            pulsegenerator: "pulsestreamer"

    switchlogic:
        module.Class: 'switch_logic.SwitchLogic'
        connect:
            switch: switch_combiner_interfuse
        #options:
        #   watchdog_interval: 1  # optional
        #   autostart_watchdog: True  # optional
    wavelogger_logic:
        module.Class: "wavemeter_logger_logic.WavemeterLoggerLogic"
        connect:
            wavemeter: "high_finesse_client"
            timetagger: 'tagger'

    cwavelogic:
        module.Class: "cwave.cwave_logic.CwaveLogic"
        connect:
            cwavelaser: "cwave"

    powercontroller_logic:
        module.Class: "power_controller.PowerControllerLogic"
        connect:
            #powermeter: "powermeter"
            motor_pi3: "motordriver_pi3_remote"

hardware:

    fastcounter_timetagger:
        module.Class: 'swabian_instruments.timetagger_fast_counter.TimeTaggerFastCounter'
        options:
            timetagger_channel_apd_0: 1
            timetagger_channel_apd_1: 2
            timetagger_channel_detect: 5
            timetagger_channel_sequence: 8
            timetagger_sum_channels: 7
        connect:
            timetagger: 'tagger'
    
    tagger:
        module.Class: 'swabian_instruments.timetagger_api.TT'
        options:
            hist:
                channels: [1,2, 3]
                trigger_channel: 5

            corr:
                channel_start: 1
                channel_stop: 2
            
            counter:
                channels: [1,2, 3]

            combiner:
                channels: [1,2]

    ni_scanner:
        module.Class: 'interfuse.ni_scanning_probe_interfuse.NiScanningProbeInterfuse'
        connect:
            scan_hardware: 'ni_tt_io'
            analog_output: 'ni_ao'
        options:
            ni_channel_mapping:
                z: 'ao2'
                x: 'ao0'
                y: 'ao1'
                APD1: 'tt1'
                APD2: 'tt2'
                APD3: 'tt3'
                APD111: 'tt111'
                #AI0: 'ai0'
                #APD3: 'PFI10'
            scan_units: 'm'
            position_ranges: # in m
                z: [-7.5e-6, 7.5e-6]
                x: [-20e-6, 20e-6]
                y: [-20e-6, 20e-6]
            frequency_ranges:
                z: [1, 300]
                x: [1, 300]
                y: [1, 300]
            resolution_ranges:
                z: [1, 1000]
                x: [1, 1000]
                y: [1, 1000]
            input_channel_units:
                APD1: 'c/s'
                APD2: 'c/s'
                APD3: 'c/s'
                APD111: 'c/s'
                #AI0: 'V's
                #APD2: 'c/s'
                #APD3: 'c/s'
            
            #backwards_line_resolution: 200 # optional
            maximum_move_velocity: 20e-6 #400e-6 #m/s 
    ni_laser_scanner:
        module.Class: 'interfuse.ni_scanning_probe_interfuse.NiScanningProbeInterfuse'
        connect:
            scan_hardware: 'ni_tt_io'
            analog_output: 'ni_ao_laser'
        options:
            ni_channel_mapping:
                a: 'ao3'
                APD1: 'tt1'
                APD2: 'tt2'
                APD3: 'tt3'
                APD111: 'tt111'
                #AI0: 'ai0'
                #APD3: 'PFI10'
            scan_units: 'Hz'
            position_ranges: # in m
                a: [0, 20e9]
            frequency_ranges:
                a: [1, 500]
            resolution_ranges:
                a: [20, 2000]
            input_channel_units:
                APD1: 'c/s'
                APD2: 'c/s'
                APD3: 'c/s'
                APD111: 'c/s'
                #AI0: 'V'
                #APD2: 'c/s'
                #APD3: 'c/s'
            backwards_line_resolution: 300 # optional
            maximum_move_velocity: 50e9 #Hz/s


    ni_tt_io:
        module.Class: 'ni_x_series.ni_tt_io.NI_TT_XSeriesFiniteSamplingIO'
        connect:
            tt: tagger
        options:
            device_name: 'Dev1'
            input_channel_units:  # optional
                tt1: 'c/s'
                tt2: 'c/s'
                tt3: 'c/s'
                tt111: 'c/s'
                #ai0: 'V'
                #ai1: 'V'
            output_channel_units:
                'ao0': 'V'
                'ao1': 'V'
                'ao2': 'V'
                'ao3': 'V'
            #adc_voltage_ranges:
                #ai0: [-10, 10]  # optional
                #ai1: [-10, 10]  # optional
            output_voltage_ranges:
                ao0: [0, 4]
                ao1: [0, 4]
                ao2: [0, 4]
                ao3: [-5, 5]
    
            
            #TODO output range, also limits need to be included in constraints
            frame_size_limits: [1, 1e9]  # optional #TODO actual HW constraint?
            output_mode: 'JUMP_LIST' #'JUMP_LIST' # optional, must be name of SamplingOutputMode
            read_write_timeout: 10  # optional
            sample_clock_output: '/Dev1/PFI14' # optional
            tt_ni_clock_input: 'tt4' #input of the clock for the NI card into the time tagger
            tt_falling_edge_clock_input: 'tt4'
            #flip mirror porto 0 channel 4

    ni_tt_finite_sampling_input:
        module.Class: 'ni_x_series.ni_x_tt_series_finite_sampling_input.NIXTTSeriesFiniteSamplingInput'
        connect:
            tagger: 'tagger'
        options:
            device_name: 'Dev1'
            digital_channel_units:  # optional
                'tt1': 'cnts'
                'tt2': 'cnts'
                'tt3': 'cnts'
                'tt111': 'cnts'
            max_channel_samples_buffer: 10000000  # optional, default 10000000
            read_write_timeout: 10  # optional, default 10
            sample_clock_output: '/Dev1/PFI14'  # optional
            counter_sample_clock_output: "/Dev1/PFI8"
            tt_ni_clock_input: 'tt4' #input of the clock for the NI card into the time tagger
            tt_falling_edge_clock_input: 'tt4'
        

    ni_ao:
        module.Class: 'ni_x_series.ni_x_series_analog_output.NIXSeriesAnalogOutput'
        options:
            device_name: 'Dev1'

            channels:
                ao0:
                    unit: 'V'
                    limits: [0, 4]
                    keep_value: True
                ao1:
                    unit: 'V'
                    limits: [0, 4]
                    keep_value: True
                ao2:
                    unit: 'V'
                    limits: [0, 4]
                    keep_value: True

    ni_ao_laser:
        module.Class: 'ni_x_series.ni_x_series_analog_output.NIXSeriesAnalogOutput'
        options:
            device_name: 'Dev1'
            channels:
                ao3:
                    unit: 'V'
                    limits: [-5, 5]
                    keep_value: True

    
    # optional, for slow counter / timer series reader
    ni_instreamer:
        module.Class: 'ni_x_series.ni_x_series_in_streamer.NIXSeriesInStreamer'
        options:
            device_name: 'Dev1'
            digital_sources:  # optional
                - 'pfi8'
                - 'pfi3'
            # analog_sources:  # optional
            #   - 'ai0'
            #   - 'ai1'
            # external_sample_clock_source: 'PFI0'  # optional
            # external_sample_clock_frequency: 1000  # optional
            # adc_voltage_range: [-10, 10]  # optional
            max_channel_samples_buffer: 10000000  # optional
            read_write_timeout: 10  # optional

    switch_combiner_interfuse:
        module.Class: 'interfuse.switch_combiner_interfuse.SwitchCombinerInterfuse'
        connect:
            switch1: flip_mirror_switch_ni
            switch2: ni_wm_switch

    blue_laser_switch_ni:
        module.Class: 'switches.digital_switch_ni.DigitalSwitchNI'
        options:
            channel: '/Dev1/port0/line4'  # optional
            name: '405 nm laser'  # optional
            switch_time: 0.1
            remember_states: True
            pulsed : False
            switches:                       # optional
                Laser405nm: ['Off', 'On']
    ni_wm_switch:
        native_module_name: 'ni_wavemeter_scanning_switch_ni'
        address: '129.69.46.209'
        port: 12345

    flip_mirror_switch_ni:
        module.Class: 'switches.digital_switch_ni.DigitalSwitchNI'
        options:
            channel: '/Dev1/port0/line6'  # optional
            name: 'Flip mirror'  # optional
            switch_time: 0.1
            remember_states: False
            pulsed : True
            switches:                       # optional
                Mirror: ['Off', 'On']

    princeton:
        module.Class: "spectrometer.princeton_client.PrincetonSpectrometerClient"
        options:
            ip: '192.168.202.44'#attodry:'169.254.128.44'
            port: 3336

    oceanoptics:
        module.Class: 'spectrometer.oceanoptics_spectrometer.OceanOptics'

    myspectrometer:
        module.Class: 'dummy.spectrometer_dummy.SpectrometerDummy'
    
    microwave_dummy:
        module.Class: 'dummy.microwave_dummy.MicrowaveDummy'

    mw_source_smiq:
        module.Class: 'microwave.mw_source_smiq.MicrowaveSmiq'
        options:
            visa_address: 'GPIB0::25::INSTR'
            comm_timeout: 10000  # in milliseconds

    finite_sampling_input_dummy:
        module.Class: 'dummy.finite_sampling_input_dummy.FiniteSamplingInputDummy'
        options:
            simulation_mode: 'ODMR'
            sample_rate_limits: [1, 1e6]
            frame_size_limits: [1, 1e9]
            channel_units:
                'APD counts': 'c/s'
                'Photodiode': 'V'
    

    high_finesse_wavemeter:
        module.Class: 'high_finesse_wavemeter.HighFinesseWavemeter'
        options:
            measurement_timing: 10.0 # in secondsc

    high_finesse_remote:
        native_module_name: 'high_finesse_wavemeter_server'
        address: '129.69.46.209'
        port: 12345

    high_finesse_client:
        module.Class: 'wavemeter.high_finesse_client.HighFinesseWavemeterClient'

    pulsestreamer:
        module.Class: 'swabian_instruments.pulse_streamer.PulseStreamer'
        options:
            pulsestreamer_ip: '192.168.202.200'
            #pulsed_file_dir: 'C:\\Software\\pulsed_files'
            laser_channel: 4
            uw_x_channel: 5
            use_external_clock: False
            external_clock_option: 0

    
    # motordriver_pi3:
    #     module.Class: 'motor.motordriver_pi3.Motordriver'
    #     options:
    #         port: 'COM3'
    #         active_motor_numbers: [1,2,3]
    motordriver_pi3_remote:
        native_module_name: 'motordriver_pi3'
        address: '129.69.46.209'
        port: 12345
        
    powermeter:
        module.Class: 'powermeter.PM100D.PM100D'
        options:
            address: 'USB0::0x1313::0x8078::P0006721::INSTR'#"USB0::0x1313::0x8078::P0027062::INSTR"#'USB0::0x1313::0x80B0::P3000581::INSTR'#'USB0::0x1313::0x8078::P0006721::INSTR' #or 'USB0::0x1313::0x80B0::P3000581::INSTR'
            process_value_channels:
                Power:
                    unit: 'W'
                    limits: [0, 0.5]
                    dtype: float

    magnet_x:
        module.Class: 'vector_magnet.ami.AMI430'
        options:
            ip: '192.168.202.102'
            port: 7180

    magnet_y:
        module.Class: 'vector_magnet.ami.AMI430'
        options:
            ip: '192.168.202.101'
            port: 7180

    magnet_z:
        module.Class: 'vector_magnet.ami.AMI430'
        options:
            ip: '192.168.202.100'
            port: 7180

    vector_magnet:
        module.Class: 'vector_magnet.ami_vector_magnet.magnet_3d'
        connect:
            magnet_x: 'magnet_x'
            magnet_y: 'magnet_y'
            magnet_z: 'magnet_z'
        options:
            constraints:
                'B_max' : 1
                'Bz_max' : 6
            timerIntervals:
                'fastRamp' : 10000
                'slowRamp' : 10000
                'rampToZero' : 10000
                'pswStatusChange' : 31000
                'equalizeCurrents' : 1000