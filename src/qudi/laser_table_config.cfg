#  Example Qudi configuration file.

global:
    # list of modules to load when starting
    startup: []

    # Module server configuration for accessing qudi GUI/logic/hardware modules from remote clients
    remote_modules_server:
        address: '129.69.46.209'
        port: 12345
        # certfile: 'D:\scudi\scudi\src\qudi\hardware\servers\certificates\cert.pem'
        # keyfile: 'D:\scudi\scudi\src\qudi\hardware\servers\certificates\key.pem'

    # Server port for serving the active qudi module namespace locally (localhost).
    # Used by e.g. the Qudi jupyter kernel.
    namespace_server_port: 18861  


    # If this flag is set (True), all arguments passed to qudi module APIs from remote
    # (jupyter notebook, qudi console, remote modules) will be wrapped and passed "per value"
    # (serialized and de-serialized). This is avoiding a lot of inconveniences with using numpy in
    # remote clients.
    # If you do not want to use this workaround and know what you are doing, you can disable this
    # feature by setting this flag to False.
    force_remote_calls_by_value: True

    # Qss stylesheet for controlling the appearance of the GUIs.
    # Absolute path or relative to qudi.artwork.styles
    stylesheet: 'qdark.qss'

    # Default root directory for measurement data storage. All eventual data sub-directories should
    # be contained within this directory. This is not enforced, just convention.
    # The fallback directory is <user home>/qudi/Data/
    # default_data_dir: C:\Users\neverhorst\qudi\Data

    # Save data to daily data sub-directories by default
    daily_data_dirs: True

gui:
    
    time_series_gui:
        module.Class: 'time_series.time_series_gui.TimeSeriesGui'
        options:
            use_antialias: True  # optional, set to False if you encounter performance issues
        connect:
            _time_series_logic_con: time_series_reader_logic

    wavemeter_gui:
        module.Class: 'wavemeter.wavemeterloggui.WavemeterLogGui'
        connect:
            wavemeterloggerlogic: 'wavelogger_logic'
    spectrometer:
        module.Class: 'spectrometer.spectrometer_gui.SpectrometerGui'
        connect:
            spectrometer_logic: 'spectrometerlogic'
    
  
    ple_gui:
        module.Class: 'ple.ple_gui.PLEScanGui'
        connect:
            scannerlogic: laser_scanner_logic
            optimizerlogic: ple_optimize_logic
            data_logic: ple_data_logic
            # microwave: odmr_logic
            #repump: ple_repump_interfuse_logic
    switch_gui:
        module.Class: 'switch.switch_gui.SwitchGui'
        connect:
            switchlogic: 'switchlogic'

    pulsed_gui:
        module.Class: 'pulsed.pulsed_maingui.PulsedMeasurementGui'
        connect:
            pulsedmasterlogic: 'pulsed_master_logic'
    cwave_gui:
        module.Class: 'cwave.cwave_gui.CwaveGui'
        connect:
            cwavelogic: 'cwavelogic'

logic:
    laser_scanner_logic:
        module.Class: 'ple.ple_scanner_logic.PLEScannerLogic'
        options:
            scan_axis: 'a'
            max_history_length: 10
            max_scan_update_interval: 2
            position_update_interval: 1
        connect:
            scanner: ni_laser_scanner
    ple_optimize_logic:
        module.Class: 'ple.optimize_logic.PLEOptimizeScannerLogic'
        connect:
            scan_logic: laser_scanner_logic
    
    ple_data_logic:
        module.Class: 'ple.data_logic.PleDataLogic'
        options:
            max_history_length: 10
        connect:
            scan_logic: laser_scanner_logic
    #ple_repump_interfuse_logic:
    #    module.Class: 'ple.repump_interfuse.RepumpInterfuseLogic'
    #    options:
    #        resonant_laser:  'd_ch1'
    #        repump_laser: 'd_ch2'
    #    connect:
    #        pulsed: pulsed_master_logic

    time_series_reader_logic:
        module.Class: 'time_series_reader_logic.TimeSeriesReaderLogic'
        options:
            max_frame_rate: 10  # optional (10Hz by default)
            calc_digital_freq: True  # optional (True by default)
            active_channels: ['ai8']
        connect:
            streamer: ni_instreamer

    pulsed_master_logic:
        module.Class: 'pulsed.pulsed_master_logic.PulsedMasterLogic'
        connect:
            pulsedmeasurementlogic: 'pulsed_measurement_logic'
            sequencegeneratorlogic: 'sequence_generator_logic'

    sequence_generator_logic:
        module.Class: 'pulsed.sequence_generator_logic.SequenceGeneratorLogic'
        #overhead_bytes: 0
        #additional_predefined_methods_path: null
        #additional_sampling_functions_path: null
        #assets_storage_path:
        connect:
            pulsegenerator: "pulsestreamer"

    pulsed_measurement_logic:
        module.Class: 'pulsed.pulsed_measurement_logic.PulsedMeasurementLogic'
        options:
            raw_data_save_type: 'text'
            #additional_extraction_path:
            #additional_analysis_path:
        connect:
            fastcounter: "fastcounter_timetagger"
            #microwave: 'microwave_dummy'
            pulsegenerator: "pulsestreamer"

    switchlogic:
        module.Class: 'switch_logic.SwitchLogic'
        connect:
            switch: switch_combiner_interfuse
        #options:
        #   watchdog_interval: 1  # optional
        #   autostart_watchdog: True  # optional
    wavelogger_logic:
        module.Class: "wavemeter_logger_logic.WavemeterLoggerLogic"
        connect:
            wavemeter: "high_finesse_wavemeter"
            timetagger: 'tagger'

    cwavelogic:
        module.Class: "cwave_logic.CwaveLogic"
        connect:
            cwavelaser: "cwave"
            
    # power_controller_remote:
    #     native_module_name: 'powercontroller_logic'
    #     address: '129.69.46.82'
    #     port: 12346

    laser_controller:
        module.Class: "laser_controller.LaserControllerLogic"
        connect:
            motor_pulser: "switch_ni"
            ao_laser_control: "ni_ao_laser_control"
        allow_remote: true
hardware:

    ni_laser_scanner:
        module.Class: 'interfuse.ni_scanning_probe_interfuse.NiScanningProbeInterfuse'
        connect:
            scan_hardware: 'ni_io'
            analog_output: 'ni_ao'
        options:
            ni_channel_mapping:
                a: 'ao0'
                APD1: 'PFI8'
                APD2: 'PFI3'
                AI8: 'ai8'
                #APD3: 'PFI10'
            position_ranges: # in m
                a: [-10, 0]
               
            frequency_ranges:
                a: [1, 300]
                
            resolution_ranges:
                a: [1, 1000]
            input_channel_units:
                APD1: 'c/s'
                APD2: 'c/s'
                AI8: 'V'
                #APD2: 'c/s'
                #APD3: 'c/s'
            backwards_line_resolution: 200 # optional
            maximum_move_velocity: 20 #m/s 


    ni_io:
        module.Class: 'ni_x_series.ni_x_series_finite_sampling_io.NIXSeriesFiniteSamplingIO'
        options:
            device_name: 'Dev2'
            input_channel_units:  # optional
                PFI8: 'c/s'
                PFI3: 'c/s'
                ai8: 'V'
                #ai1: 'V'
            output_channel_units:
                'ao0': 'V'
                'ao1': 'V'
                'ao2': 'V'
                'ao3': 'V'
            adc_voltage_ranges:
                ai8: [-10, 10]  # optional
                #ai1: [-10, 10]  # optional
            output_voltage_ranges:
                ao0: [-10, 0]
                ao1: [0, 10]
                ao2: [0, 10]
                ao3: [-10, 0]
    
            
            #TODO output range, also limits need to be included in constraints
            frame_size_limits: [1, 1e9]  # optional #TODO actual HW constraint?
            output_mode: 'JUMP_LIST' #'JUMP_LIST' # optional, must be name of SamplingOutputMode
            read_write_timeout: 10  # optional
            #sample_clock_output: '/Dev2/PFI11' # optional
            #flip mirror porto 0 channel 4
    ni_ao:
        module.Class: 'ni_x_series.ni_x_series_analog_output.NIXSeriesAnalogOutput'
        options:
            device_name: 'Dev2'
            channels:
                ao0:
                    unit: 'V'
                    limits: [-10, 0]
                    keep_value: True
                ao1:
                    unit: 'V'
                    limits: [0, 10]
                    keep_value: True
                ao2:
                    unit: 'V'
                    limits: [0, 10]
                    keep_value: True
                ao3:
                    unit: 'V'
                    limits: [-10, 0]
                    keep_value: True

    # optional, for slow counter / timer series reader
    ni_instreamer:
        module.Class: 'ni_x_series.ni_x_series_in_streamer.NIXSeriesInStreamer'
        options:
            device_name: 'Dev2'
            digital_sources:  # optional
                - 'pfi8'
                - 'pfi3'
            analog_sources:  # optional
                - 'ai8'
            #   - 'ai1'
            # external_sample_clock_source: 'PFI0'  # optional
            # external_sample_clock_frequency: 1000  # optional
            # adc_voltage_range: [-10, 10]  # optional
            max_channel_samples_buffer: 10000000  # optional
            read_write_timeout: 10  # optional
        
    ni_finite_sampling_input:
        module.Class: 'ni_x_series.ni_x_series_finite_sampling_input.NIXSeriesFiniteSamplingInput'
        options:
            device_name: 'Dev2'
            digital_channel_units:  # optional
                'pfi8': 'cnts'
                'pfi3': 'cnts'
            analog_channel_units:  # optional
                'ai8': 'V'

            max_channel_samples_buffer: 10000000  # optional, default 10000000
            read_write_timeout: 10  # optional, default 10
            sample_clock_output: '/Dev2/PFI14'  # optional
    
    switch_ni:
        module.Class: 'switches.digital_switch_ni.DigitalSwitchNI'
        options:
            channel: '/Dev2/port0/line8'
            name: 'dye_motor'
            switch_time: 0.01
            remember_states: False
            pulsed : True
            switches:                       
                motor: ['Low', 'High']
    
    ni_ao_laser_control:
        module.Class: 'ni_x_series.ni_x_series_analog_output.NIXSeriesAnalogOutput'
        options:
            device_name: 'Dev2'
            channels:
                ao0:
                    unit: 'V'
                    limits: [-10, 0]
                    keep_value: True
                ao2:
                    unit: 'V'
                    limits: [-5, 5]
                    keep_value: True


    switch_combiner_interfuse:
        module.Class: 'interfuse.switch_combiner_interfuse.SwitchCombinerInterfuse'
        connect:
            switch1: flip_mirror_switch_ni
            switch2: blue_laser_switch_ni

    blue_laser_switch_ni:
        module.Class: 'switches.digital_switch_ni.DigitalSwitchNI'
        options:
            channel: '/Dev2/port0/line4'  # optional
            name: '405 nm laser'  # optional
            switch_time: 0.1
            remember_states: True
            pulsed : False
            switches:                       # optional
                Laser405nm: ['Off', 'On']

    flip_mirror_switch_ni:
        module.Class: 'switches.digital_switch_ni.DigitalSwitchNI'
        options:
            channel: '/Dev2/port0/line6'  # optional
            name: 'Flip mirror'  # optional
            switch_time: 0.1
            remember_states: False
            pulsed : True
            switches:                       # optional
                Mirror: ['Off', 'On']

    princeton:
        module.Class: "spectrometer.princeton_client.PrincetonSpectrometerClient"
        options:
            ip: '192.168.202.44'#attodry:'169.254.128.44'
            port: 3336

    oceanoptics:
        module.Class: 'spectrometer.oceanoptics_spectrometer.OceanOptics'

    myspectrometer:
        module.Class: 'dummy.spectrometer_dummy.SpectrometerDummy'
    
    microwave_dummy:
        module.Class: 'dummy.microwave_dummy.MicrowaveDummy'

    mw_source_smiq:
        module.Class: 'microwave.mw_source_smiq.MicrowaveSmiq'
        options:
            visa_address: 'GPIB0::29::INSTR'
            comm_timeout: 10000  # in milliseconds

    
    dl_pro:
        module.Class: 'laser.toptica_dl_pro.DlProLaser'
        options:
            tcp_address: '169.254.128.41'
            current_range: [0, 90]
        
    high_finesse_wavemeter_server:
        module.Class: 'wavemeter.high_finesse_wavemeter.HighFinesseWavemeter'
        options:
            measurement_timing: 0.3 # in secondsc
            active_channels: [2,3]
            default_channel: 2

        allow_remote: true
    # high_finesse_client:
    #     module.Class: 'wavemeter.high_finesse_client.HighFinesseWavemeterClient'

    pulsestreamer:
        module.Class: 'swabian_instruments.pulse_streamer.PulseStreamer'
        options:
            pulsestreamer_ip: ''
            #pulsed_file_dir: 'C:\\Software\\pulsed_files'
            laser_channel: 0
            uw_x_channel: 1
            use_external_clock: False
            external_clock_option: 0
    
    cwave:
        module.Class: 'cwave.cwave_api.CWave'
        options:
            ip: '129.69.46.217'
            port: '10001'
    